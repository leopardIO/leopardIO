// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "job.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cjtech {

namespace {

const ::google::protobuf::Descriptor* Job_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Job_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_job_2eproto() {
  protobuf_AddDesc_job_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "job.proto");
  GOOGLE_CHECK(file != NULL);
  Job_descriptor_ = file->message_type(0);
  static const int Job_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, start_time__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, end_time_),
  };
  Job_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Job_descriptor_,
      Job::default_instance_,
      Job_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Job, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Job));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_job_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Job_descriptor_, &Job::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_job_2eproto() {
  delete Job::default_instance_;
  delete Job_reflection_;
}

void protobuf_AddDesc_job_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tjob.proto\022\006cjtech\"}\n\003Job\022\017\n\007task_id\030\001 "
    "\002(\005\022\020\n\010job_type\030\002 \002(\005\022\024\n\014content_type\030\003 "
    "\002(\005\022\026\n\016content_length\030\004 \002(\005\022\023\n\013start_tim"
    "e_\030\005 \002(\003\022\020\n\010end_time\030\006 \002(\003", 146);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "job.proto", &protobuf_RegisterTypes);
  Job::default_instance_ = new Job();
  Job::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_job_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_job_2eproto {
  StaticDescriptorInitializer_job_2eproto() {
    protobuf_AddDesc_job_2eproto();
  }
} static_descriptor_initializer_job_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Job::kTaskIdFieldNumber;
const int Job::kJobTypeFieldNumber;
const int Job::kContentTypeFieldNumber;
const int Job::kContentLengthFieldNumber;
const int Job::kStartTimeFieldNumber;
const int Job::kEndTimeFieldNumber;
#endif  // !_MSC_VER

Job::Job()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Job::InitAsDefaultInstance() {
}

Job::Job(const Job& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Job::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  job_type_ = 0;
  content_type_ = 0;
  content_length_ = 0;
  start_time__ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Job::~Job() {
  SharedDtor();
}

void Job::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Job::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Job::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Job_descriptor_;
}

const Job& Job::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

Job* Job::default_instance_ = NULL;

Job* Job::New() const {
  return new Job;
}

void Job::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    job_type_ = 0;
    content_type_ = 0;
    content_length_ = 0;
    start_time__ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Job::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_type;
        break;
      }

      // required int32 job_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_type_)));
          set_has_job_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_content_type;
        break;
      }

      // required int32 content_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_content_length;
        break;
      }

      // required int32 content_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time_;
        break;
      }

      // required int64 start_time_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time__)));
          set_has_start_time_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Job::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required int32 job_type = 2;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job_type(), output);
  }

  // required int32 content_type = 3;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->content_type(), output);
  }

  // required int32 content_length = 4;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->content_length(), output);
  }

  // required int64 start_time_ = 5;
  if (has_start_time_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time_(), output);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Job::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required int32 job_type = 2;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job_type(), target);
  }

  // required int32 content_type = 3;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->content_type(), target);
  }

  // required int32 content_length = 4;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->content_length(), target);
  }

  // required int64 start_time_ = 5;
  if (has_start_time_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time_(), target);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Job::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required int32 job_type = 2;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_type());
    }

    // required int32 content_type = 3;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_type());
    }

    // required int32 content_length = 4;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_length());
    }

    // required int64 start_time_ = 5;
    if (has_start_time_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_());
    }

    // required int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Job::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Job* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Job*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
    if (from.has_start_time_()) {
      set_start_time_(from.start_time_());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Job::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Job::Swap(Job* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(job_type_, other->job_type_);
    std::swap(content_type_, other->content_type_);
    std::swap(content_length_, other->content_length_);
    std::swap(start_time__, other->start_time__);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Job::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Job_descriptor_;
  metadata.reflection = Job_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cjtech

// @@protoc_insertion_point(global_scope)
