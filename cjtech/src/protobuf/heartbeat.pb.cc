// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cjtech {

namespace {

const ::google::protobuf::Descriptor* heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  heartbeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_heartbeat_2eproto() {
  protobuf_AddDesc_heartbeat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "heartbeat.proto");
  GOOGLE_CHECK(file != NULL);
  heartbeat_descriptor_ = file->message_type(0);
  static const int heartbeat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, netio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, diskio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, gpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, stutasreq_),
  };
  heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      heartbeat_descriptor_,
      heartbeat::default_instance_,
      heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(heartbeat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_heartbeat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    heartbeat_descriptor_, &heartbeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_heartbeat_2eproto() {
  delete heartbeat::default_instance_;
  delete heartbeat_reflection_;
}

void protobuf_AddDesc_heartbeat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017heartbeat.proto\022\006cjtech\"f\n\theartbeat\022\r"
    "\n\005token\030\001 \002(\005\022\013\n\003cpu\030\002 \002(\005\022\r\n\005netIO\030\003 \002("
    "\005\022\016\n\006diskIO\030\004 \002(\005\022\013\n\003gpu\030\005 \001(\005\022\021\n\tstutas"
    "Req\030\006 \001(\t", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "heartbeat.proto", &protobuf_RegisterTypes);
  heartbeat::default_instance_ = new heartbeat();
  heartbeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_heartbeat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_heartbeat_2eproto {
  StaticDescriptorInitializer_heartbeat_2eproto() {
    protobuf_AddDesc_heartbeat_2eproto();
  }
} static_descriptor_initializer_heartbeat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int heartbeat::kTokenFieldNumber;
const int heartbeat::kCpuFieldNumber;
const int heartbeat::kNetIOFieldNumber;
const int heartbeat::kDiskIOFieldNumber;
const int heartbeat::kGpuFieldNumber;
const int heartbeat::kStutasReqFieldNumber;
#endif  // !_MSC_VER

heartbeat::heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void heartbeat::InitAsDefaultInstance() {
}

heartbeat::heartbeat(const heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void heartbeat::SharedCtor() {
  _cached_size_ = 0;
  token_ = 0;
  cpu_ = 0;
  netio_ = 0;
  diskio_ = 0;
  gpu_ = 0;
  stutasreq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

heartbeat::~heartbeat() {
  SharedDtor();
}

void heartbeat::SharedDtor() {
  if (stutasreq_ != &::google::protobuf::internal::kEmptyString) {
    delete stutasreq_;
  }
  if (this != default_instance_) {
  }
}

void heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return heartbeat_descriptor_;
}

const heartbeat& heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_heartbeat_2eproto();
  return *default_instance_;
}

heartbeat* heartbeat::default_instance_ = NULL;

heartbeat* heartbeat::New() const {
  return new heartbeat;
}

void heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_ = 0;
    cpu_ = 0;
    netio_ = 0;
    diskio_ = 0;
    gpu_ = 0;
    if (has_stutasreq()) {
      if (stutasreq_ != &::google::protobuf::internal::kEmptyString) {
        stutasreq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu;
        break;
      }

      // required int32 cpu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_netIO;
        break;
      }

      // required int32 netIO = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netIO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netio_)));
          set_has_netio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diskIO;
        break;
      }

      // required int32 diskIO = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diskIO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diskio_)));
          set_has_diskio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gpu;
        break;
      }

      // optional int32 gpu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_)));
          set_has_gpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stutasReq;
        break;
      }

      // optional string stutasReq = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stutasReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stutasreq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stutasreq().data(), this->stutasreq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // required int32 cpu = 2;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpu(), output);
  }

  // required int32 netIO = 3;
  if (has_netio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->netio(), output);
  }

  // required int32 diskIO = 4;
  if (has_diskio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->diskio(), output);
  }

  // optional int32 gpu = 5;
  if (has_gpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gpu(), output);
  }

  // optional string stutasReq = 6;
  if (has_stutasreq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stutasreq().data(), this->stutasreq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stutasreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // required int32 cpu = 2;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpu(), target);
  }

  // required int32 netIO = 3;
  if (has_netio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->netio(), target);
  }

  // required int32 diskIO = 4;
  if (has_diskio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->diskio(), target);
  }

  // optional int32 gpu = 5;
  if (has_gpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gpu(), target);
  }

  // optional string stutasReq = 6;
  if (has_stutasreq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stutasreq().data(), this->stutasreq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stutasreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token());
    }

    // required int32 cpu = 2;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu());
    }

    // required int32 netIO = 3;
    if (has_netio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->netio());
    }

    // required int32 diskIO = 4;
    if (has_diskio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diskio());
    }

    // optional int32 gpu = 5;
    if (has_gpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu());
    }

    // optional string stutasReq = 6;
    if (has_stutasreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stutasreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void heartbeat::MergeFrom(const heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
    if (from.has_netio()) {
      set_netio(from.netio());
    }
    if (from.has_diskio()) {
      set_diskio(from.diskio());
    }
    if (from.has_gpu()) {
      set_gpu(from.gpu());
    }
    if (from.has_stutasreq()) {
      set_stutasreq(from.stutasreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat::CopyFrom(const heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void heartbeat::Swap(heartbeat* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(cpu_, other->cpu_);
    std::swap(netio_, other->netio_);
    std::swap(diskio_, other->diskio_);
    std::swap(gpu_, other->gpu_);
    std::swap(stutasreq_, other->stutasreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = heartbeat_descriptor_;
  metadata.reflection = heartbeat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cjtech

// @@protoc_insertion_point(global_scope)
