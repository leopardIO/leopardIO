// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#ifndef PROTOBUF_heartbeat_2eproto__INCLUDED
#define PROTOBUF_heartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cjtech {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_heartbeat_2eproto();
void protobuf_AssignDesc_heartbeat_2eproto();
void protobuf_ShutdownFile_heartbeat_2eproto();

class heartbeat;

// ===================================================================

class heartbeat : public ::google::protobuf::Message {
 public:
  heartbeat();
  virtual ~heartbeat();

  heartbeat(const heartbeat& from);

  inline heartbeat& operator=(const heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const heartbeat& default_instance();

  void Swap(heartbeat* other);

  // implements Message ----------------------------------------------

  heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const heartbeat& from);
  void MergeFrom(const heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline ::google::protobuf::int32 token() const;
  inline void set_token(::google::protobuf::int32 value);

  // required int32 cpu = 2;
  inline bool has_cpu() const;
  inline void clear_cpu();
  static const int kCpuFieldNumber = 2;
  inline ::google::protobuf::int32 cpu() const;
  inline void set_cpu(::google::protobuf::int32 value);

  // required int32 netIO = 3;
  inline bool has_netio() const;
  inline void clear_netio();
  static const int kNetIOFieldNumber = 3;
  inline ::google::protobuf::int32 netio() const;
  inline void set_netio(::google::protobuf::int32 value);

  // required int32 diskIO = 4;
  inline bool has_diskio() const;
  inline void clear_diskio();
  static const int kDiskIOFieldNumber = 4;
  inline ::google::protobuf::int32 diskio() const;
  inline void set_diskio(::google::protobuf::int32 value);

  // optional int32 gpu = 5;
  inline bool has_gpu() const;
  inline void clear_gpu();
  static const int kGpuFieldNumber = 5;
  inline ::google::protobuf::int32 gpu() const;
  inline void set_gpu(::google::protobuf::int32 value);

  // optional string stutasReq = 6;
  inline bool has_stutasreq() const;
  inline void clear_stutasreq();
  static const int kStutasReqFieldNumber = 6;
  inline const ::std::string& stutasreq() const;
  inline void set_stutasreq(const ::std::string& value);
  inline void set_stutasreq(const char* value);
  inline void set_stutasreq(const char* value, size_t size);
  inline ::std::string* mutable_stutasreq();
  inline ::std::string* release_stutasreq();
  inline void set_allocated_stutasreq(::std::string* stutasreq);

  // @@protoc_insertion_point(class_scope:cjtech.heartbeat)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_cpu();
  inline void clear_has_cpu();
  inline void set_has_netio();
  inline void clear_has_netio();
  inline void set_has_diskio();
  inline void clear_has_diskio();
  inline void set_has_gpu();
  inline void clear_has_gpu();
  inline void set_has_stutasreq();
  inline void clear_has_stutasreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 token_;
  ::google::protobuf::int32 cpu_;
  ::google::protobuf::int32 netio_;
  ::google::protobuf::int32 diskio_;
  ::std::string* stutasreq_;
  ::google::protobuf::int32 gpu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_heartbeat_2eproto();
  friend void protobuf_AssignDesc_heartbeat_2eproto();
  friend void protobuf_ShutdownFile_heartbeat_2eproto();

  void InitAsDefaultInstance();
  static heartbeat* default_instance_;
};
// ===================================================================


// ===================================================================

// heartbeat

// required int32 token = 1;
inline bool heartbeat::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void heartbeat::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void heartbeat::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void heartbeat::clear_token() {
  token_ = 0;
  clear_has_token();
}
inline ::google::protobuf::int32 heartbeat::token() const {
  return token_;
}
inline void heartbeat::set_token(::google::protobuf::int32 value) {
  set_has_token();
  token_ = value;
}

// required int32 cpu = 2;
inline bool heartbeat::has_cpu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void heartbeat::set_has_cpu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void heartbeat::clear_has_cpu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void heartbeat::clear_cpu() {
  cpu_ = 0;
  clear_has_cpu();
}
inline ::google::protobuf::int32 heartbeat::cpu() const {
  return cpu_;
}
inline void heartbeat::set_cpu(::google::protobuf::int32 value) {
  set_has_cpu();
  cpu_ = value;
}

// required int32 netIO = 3;
inline bool heartbeat::has_netio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void heartbeat::set_has_netio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void heartbeat::clear_has_netio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void heartbeat::clear_netio() {
  netio_ = 0;
  clear_has_netio();
}
inline ::google::protobuf::int32 heartbeat::netio() const {
  return netio_;
}
inline void heartbeat::set_netio(::google::protobuf::int32 value) {
  set_has_netio();
  netio_ = value;
}

// required int32 diskIO = 4;
inline bool heartbeat::has_diskio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void heartbeat::set_has_diskio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void heartbeat::clear_has_diskio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void heartbeat::clear_diskio() {
  diskio_ = 0;
  clear_has_diskio();
}
inline ::google::protobuf::int32 heartbeat::diskio() const {
  return diskio_;
}
inline void heartbeat::set_diskio(::google::protobuf::int32 value) {
  set_has_diskio();
  diskio_ = value;
}

// optional int32 gpu = 5;
inline bool heartbeat::has_gpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void heartbeat::set_has_gpu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void heartbeat::clear_has_gpu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void heartbeat::clear_gpu() {
  gpu_ = 0;
  clear_has_gpu();
}
inline ::google::protobuf::int32 heartbeat::gpu() const {
  return gpu_;
}
inline void heartbeat::set_gpu(::google::protobuf::int32 value) {
  set_has_gpu();
  gpu_ = value;
}

// optional string stutasReq = 6;
inline bool heartbeat::has_stutasreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void heartbeat::set_has_stutasreq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void heartbeat::clear_has_stutasreq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void heartbeat::clear_stutasreq() {
  if (stutasreq_ != &::google::protobuf::internal::kEmptyString) {
    stutasreq_->clear();
  }
  clear_has_stutasreq();
}
inline const ::std::string& heartbeat::stutasreq() const {
  return *stutasreq_;
}
inline void heartbeat::set_stutasreq(const ::std::string& value) {
  set_has_stutasreq();
  if (stutasreq_ == &::google::protobuf::internal::kEmptyString) {
    stutasreq_ = new ::std::string;
  }
  stutasreq_->assign(value);
}
inline void heartbeat::set_stutasreq(const char* value) {
  set_has_stutasreq();
  if (stutasreq_ == &::google::protobuf::internal::kEmptyString) {
    stutasreq_ = new ::std::string;
  }
  stutasreq_->assign(value);
}
inline void heartbeat::set_stutasreq(const char* value, size_t size) {
  set_has_stutasreq();
  if (stutasreq_ == &::google::protobuf::internal::kEmptyString) {
    stutasreq_ = new ::std::string;
  }
  stutasreq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* heartbeat::mutable_stutasreq() {
  set_has_stutasreq();
  if (stutasreq_ == &::google::protobuf::internal::kEmptyString) {
    stutasreq_ = new ::std::string;
  }
  return stutasreq_;
}
inline ::std::string* heartbeat::release_stutasreq() {
  clear_has_stutasreq();
  if (stutasreq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stutasreq_;
    stutasreq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void heartbeat::set_allocated_stutasreq(::std::string* stutasreq) {
  if (stutasreq_ != &::google::protobuf::internal::kEmptyString) {
    delete stutasreq_;
  }
  if (stutasreq) {
    set_has_stutasreq();
    stutasreq_ = stutasreq;
  } else {
    clear_has_stutasreq();
    stutasreq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cjtech

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_heartbeat_2eproto__INCLUDED
