// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SearchResultMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SearchResultMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SearchResultMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchResultMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SearchResultMessage_2eproto() {
  protobuf_AddDesc_SearchResultMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SearchResultMessage.proto");
  GOOGLE_CHECK(file != NULL);
  SearchResultMessage_descriptor_ = file->message_type(0);
  static const int SearchResultMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, picture_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, result_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, mj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, trackerurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, status_),
  };
  SearchResultMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchResultMessage_descriptor_,
      SearchResultMessage::default_instance_,
      SearchResultMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResultMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchResultMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SearchResultMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchResultMessage_descriptor_, &SearchResultMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SearchResultMessage_2eproto() {
  delete SearchResultMessage::default_instance_;
  delete SearchResultMessage_reflection_;
}

void protobuf_AddDesc_SearchResultMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SearchResultMessage.proto\"\206\001\n\023SearchRe"
    "sultMessage\022\024\n\014picture_name\030\001 \002(\t\022\025\n\rres"
    "ult_length\030\002 \002(\r\022\017\n\007task_id\030\003 \002(\r\022\r\n\005mj_"
    "id\030\004 \002(\t\022\022\n\ntrackerUrl\030\005 \002(\t\022\016\n\006status\030\006"
    " \002(\r", 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SearchResultMessage.proto", &protobuf_RegisterTypes);
  SearchResultMessage::default_instance_ = new SearchResultMessage();
  SearchResultMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SearchResultMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SearchResultMessage_2eproto {
  StaticDescriptorInitializer_SearchResultMessage_2eproto() {
    protobuf_AddDesc_SearchResultMessage_2eproto();
  }
} static_descriptor_initializer_SearchResultMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SearchResultMessage::kPictureNameFieldNumber;
const int SearchResultMessage::kResultLengthFieldNumber;
const int SearchResultMessage::kTaskIdFieldNumber;
const int SearchResultMessage::kMjIdFieldNumber;
const int SearchResultMessage::kTrackerUrlFieldNumber;
const int SearchResultMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

SearchResultMessage::SearchResultMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchResultMessage::InitAsDefaultInstance() {
}

SearchResultMessage::SearchResultMessage(const SearchResultMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchResultMessage::SharedCtor() {
  _cached_size_ = 0;
  picture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_length_ = 0u;
  task_id_ = 0u;
  mj_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trackerurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchResultMessage::~SearchResultMessage() {
  SharedDtor();
}

void SearchResultMessage::SharedDtor() {
  if (picture_name_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_name_;
  }
  if (mj_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mj_id_;
  }
  if (trackerurl_ != &::google::protobuf::internal::kEmptyString) {
    delete trackerurl_;
  }
  if (this != default_instance_) {
  }
}

void SearchResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResultMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchResultMessage_descriptor_;
}

const SearchResultMessage& SearchResultMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SearchResultMessage_2eproto();
  return *default_instance_;
}

SearchResultMessage* SearchResultMessage::default_instance_ = NULL;

SearchResultMessage* SearchResultMessage::New() const {
  return new SearchResultMessage;
}

void SearchResultMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_picture_name()) {
      if (picture_name_ != &::google::protobuf::internal::kEmptyString) {
        picture_name_->clear();
      }
    }
    result_length_ = 0u;
    task_id_ = 0u;
    if (has_mj_id()) {
      if (mj_id_ != &::google::protobuf::internal::kEmptyString) {
        mj_id_->clear();
      }
    }
    if (has_trackerurl()) {
      if (trackerurl_ != &::google::protobuf::internal::kEmptyString) {
        trackerurl_->clear();
      }
    }
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string picture_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_name().data(), this->picture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_length;
        break;
      }

      // required uint32 result_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_length_)));
          set_has_result_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // required uint32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mj_id;
        break;
      }

      // required string mj_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mj_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mj_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mj_id().data(), this->mj_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trackerUrl;
        break;
      }

      // required string trackerUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackerUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackerurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackerurl().data(), this->trackerurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string picture_name = 1;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->picture_name(), output);
  }

  // required uint32 result_length = 2;
  if (has_result_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_length(), output);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  // required string mj_id = 4;
  if (has_mj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mj_id().data(), this->mj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mj_id(), output);
  }

  // required string trackerUrl = 5;
  if (has_trackerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackerurl().data(), this->trackerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->trackerurl(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchResultMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string picture_name = 1;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->picture_name(), target);
  }

  // required uint32 result_length = 2;
  if (has_result_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_length(), target);
  }

  // required uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  // required string mj_id = 4;
  if (has_mj_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mj_id().data(), this->mj_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mj_id(), target);
  }

  // required string trackerUrl = 5;
  if (has_trackerurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackerurl().data(), this->trackerurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trackerurl(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchResultMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string picture_name = 1;
    if (has_picture_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_name());
    }

    // required uint32 result_length = 2;
    if (has_result_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_length());
    }

    // required uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required string mj_id = 4;
    if (has_mj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mj_id());
    }

    // required string trackerUrl = 5;
    if (has_trackerurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackerurl());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchResultMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchResultMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchResultMessage::MergeFrom(const SearchResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_picture_name()) {
      set_picture_name(from.picture_name());
    }
    if (from.has_result_length()) {
      set_result_length(from.result_length());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_mj_id()) {
      set_mj_id(from.mj_id());
    }
    if (from.has_trackerurl()) {
      set_trackerurl(from.trackerurl());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResultMessage::CopyFrom(const SearchResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SearchResultMessage::Swap(SearchResultMessage* other) {
  if (other != this) {
    std::swap(picture_name_, other->picture_name_);
    std::swap(result_length_, other->result_length_);
    std::swap(task_id_, other->task_id_);
    std::swap(mj_id_, other->mj_id_);
    std::swap(trackerurl_, other->trackerurl_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchResultMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchResultMessage_descriptor_;
  metadata.reflection = SearchResultMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
